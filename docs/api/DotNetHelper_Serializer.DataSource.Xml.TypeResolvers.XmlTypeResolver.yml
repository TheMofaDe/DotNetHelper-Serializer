### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  commentId: T:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  id: XmlTypeResolver
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  children:
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName(System.Type)
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.String)
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.Type,System.String)
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
  langs:
  - csharp
  - vb
  name: XmlTypeResolver
  nameWithType: XmlTypeResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  type: Class
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: XmlTypeResolver
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 5
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: 'public class XmlTypeResolver : IXmlTypeResolver'
    content.vb: >-
      Public Class XmlTypeResolver
          Implements IXmlTypeResolver
  inheritance:
  - System.Object
  implements:
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
  commentId: P:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
  id: AssemblyResolver
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  langs:
  - csharp
  - vb
  name: AssemblyResolver
  nameWithType: XmlTypeResolver.AssemblyResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: AssemblyResolver
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 7
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: public Func<AssemblyName, Assembly> AssemblyResolver { get; set; }
    parameters: []
    return:
      type: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
    content.vb: Public Property AssemblyResolver As Func(Of AssemblyName, Assembly)
  overload: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
  commentId: P:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
  id: TypeResolver
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  langs:
  - csharp
  - vb
  name: TypeResolver
  nameWithType: XmlTypeResolver.TypeResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: TypeResolver
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 9
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: public Func<Assembly, string, bool, Type> TypeResolver { get; set; }
    parameters: []
    return:
      type: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
    content.vb: Public Property TypeResolver As Func(Of Assembly, String, Boolean, Type)
  overload: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName(System.Type)
  commentId: M:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName(System.Type)
  id: GetTypeName(System.Type)
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  langs:
  - csharp
  - vb
  name: GetTypeName(Type)
  nameWithType: XmlTypeResolver.GetTypeName(Type)
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName(System.Type)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetTypeName
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 11
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: public virtual string GetTypeName(Type valueType)
    parameters:
    - id: valueType
      type: System.Type
    return:
      type: System.String
    content.vb: Public Overridable Function GetTypeName(valueType As Type) As String
  overload: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName*
  implements:
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.Type,System.String)
  commentId: M:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.Type,System.String)
  id: ResolveTypeName(System.Type,System.String)
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  langs:
  - csharp
  - vb
  name: ResolveTypeName(Type, String)
  nameWithType: XmlTypeResolver.ResolveTypeName(Type, String)
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ResolveTypeName
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 21
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: public Type ResolveTypeName(Type rootType, string typeName)
    parameters:
    - id: rootType
      type: System.Type
    - id: typeName
      type: System.String
    return:
      type: System.Type
    content.vb: Public Function ResolveTypeName(rootType As Type, typeName As String) As Type
  overload: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName*
  implements:
  - DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.String)
  commentId: M:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.String)
  id: ResolveTypeName(System.String)
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver
  langs:
  - csharp
  - vb
  name: ResolveTypeName(String)
  nameWithType: XmlTypeResolver.ResolveTypeName(String)
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ResolveTypeName
    path: ../src/DotNetHelper-Serializer/DataSource/Xml/TypeResolvers/XmlTypeResolver.cs
    startLine: 54
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  syntax:
    content: protected Type ResolveTypeName(string typeName)
    parameters:
    - id: typeName
      type: System.String
    return:
      type: System.Type
    content.vb: Protected Function ResolveTypeName(typeName As String) As Type
  overload: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  commentId: N:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  name: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  nameWithType: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
  commentId: T:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers
  name: IXmlTypeResolver
  nameWithType: IXmlTypeResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
  commentId: M:DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  parent: DotNetHelper_Serializer.Extension.TypeExtension
  definition: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  name: CanHaveNullValue<XmlTypeResolver>()
  nameWithType: TypeExtension.CanHaveNullValue<XmlTypeResolver>()
  fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver>()
  nameWithType.vb: TypeExtension.CanHaveNullValue(Of XmlTypeResolver)()
  fullName.vb: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver)()
  name.vb: CanHaveNullValue(Of XmlTypeResolver)()
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
    name: CanHaveNullValue<XmlTypeResolver>
    nameWithType: TypeExtension.CanHaveNullValue<XmlTypeResolver>
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
    name: CanHaveNullValue(Of XmlTypeResolver)
    nameWithType: TypeExtension.CanHaveNullValue(Of XmlTypeResolver)
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  commentId: M:DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  name: CanHaveNullValue<T>(T)
  nameWithType: TypeExtension.CanHaveNullValue<T>(T)
  fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<T>(T)
  nameWithType.vb: TypeExtension.CanHaveNullValue(Of T)(T)
  fullName.vb: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of T)(T)
  name.vb: CanHaveNullValue(Of T)(T)
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
    name: CanHaveNullValue<T>
    nameWithType: TypeExtension.CanHaveNullValue<T>
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
    name: CanHaveNullValue(Of T)
    nameWithType: TypeExtension.CanHaveNullValue(Of T)
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Extension.TypeExtension
  commentId: T:DotNetHelper_Serializer.Extension.TypeExtension
  parent: DotNetHelper_Serializer.Extension
  name: TypeExtension
  nameWithType: TypeExtension
  fullName: DotNetHelper_Serializer.Extension.TypeExtension
- uid: DotNetHelper_Serializer.Extension
  commentId: N:DotNetHelper_Serializer.Extension
  name: DotNetHelper_Serializer.Extension
  nameWithType: DotNetHelper_Serializer.Extension
  fullName: DotNetHelper_Serializer.Extension
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver*
  commentId: Overload:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
  name: AssemblyResolver
  nameWithType: XmlTypeResolver.AssemblyResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.AssemblyResolver
- uid: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
  commentId: T:System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
  parent: System
  definition: System.Func`2
  name: Func<AssemblyName, Assembly>
  nameWithType: Func<AssemblyName, Assembly>
  fullName: System.Func<System.Reflection.AssemblyName, System.Reflection.Assembly>
  nameWithType.vb: Func(Of AssemblyName, Assembly)
  fullName.vb: System.Func(Of System.Reflection.AssemblyName, System.Reflection.Assembly)
  name.vb: Func(Of AssemblyName, Assembly)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver*
  commentId: Overload:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
  name: TypeResolver
  nameWithType: XmlTypeResolver.TypeResolver
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.TypeResolver
- uid: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
  commentId: T:System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
  parent: System
  definition: System.Func`4
  name: Func<Assembly, String, Boolean, Type>
  nameWithType: Func<Assembly, String, Boolean, Type>
  fullName: System.Func<System.Reflection.Assembly, System.String, System.Boolean, System.Type>
  nameWithType.vb: Func(Of Assembly, String, Boolean, Type)
  fullName.vb: System.Func(Of System.Reflection.Assembly, System.String, System.Boolean, System.Type)
  name.vb: Func(Of Assembly, String, Boolean, Type)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName*
  commentId: Overload:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName
  name: GetTypeName
  nameWithType: XmlTypeResolver.GetTypeName
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.GetTypeName
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
  commentId: M:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
  isExternal: true
  name: GetTypeName(Type)
  nameWithType: IXmlTypeResolver.GetTypeName(Type)
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
  spec.csharp:
  - uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
    name: GetTypeName
    nameWithType: IXmlTypeResolver.GetTypeName
    fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName(System.Type)
    name: GetTypeName
    nameWithType: IXmlTypeResolver.GetTypeName
    fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.GetTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName*
  commentId: Overload:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName
  name: ResolveTypeName
  nameWithType: XmlTypeResolver.ResolveTypeName
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.XmlTypeResolver.ResolveTypeName
- uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type,System.String)
  commentId: M:DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type,System.String)
  parent: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver
  isExternal: true
  name: ResolveTypeName(Type, String)
  nameWithType: IXmlTypeResolver.ResolveTypeName(Type, String)
  fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type, System.String)
  spec.csharp:
  - uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type,System.String)
    name: ResolveTypeName
    nameWithType: IXmlTypeResolver.ResolveTypeName
    fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName(System.Type,System.String)
    name: ResolveTypeName
    nameWithType: IXmlTypeResolver.ResolveTypeName
    fullName: DotNetHelper_Serializer.DataSource.Xml.TypeResolvers.IXmlTypeResolver.ResolveTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
