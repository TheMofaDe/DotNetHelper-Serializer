### YamlMime:ManagedReference
items:
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb
  commentId: T:DotNetHelper_Serializer.Interface.IDataSourceDb
  id: IDataSourceDb
  parent: DotNetHelper_Serializer.Interface
  children:
  - DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
  - DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString
  - DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString``1
  - DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable(System.Data.DataTable,System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile(System.String,System.String,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.List{``0},System.String,DotNetHelper_Contracts.Enum.DataSource.ScriptType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass(System.Type,System.String,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass``1(System.String,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject``1(``0,System.String,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
  - DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Database
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile(System.String,System.String,DotNetHelper_IO.Enum.FileOption,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.IEnumerable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql``1(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Get(System.String,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Get``1(System.String,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection(System.Boolean,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter(System.String,System.Object)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne``1(``0,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters``1(System.String,System.Dynamic.ExpandoObject,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
  - DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
  - DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
  - DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
  - DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
  - DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime(System.Data.IDbConnection,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.OnSqlException
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Password
  - DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Port
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
  - DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
  - DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties
  - DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist(System.String,System.Boolean)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql``1(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass(System.String,System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Server
  - DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist(System.String)
  - DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
  - DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
  - DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
  - DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
  - DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
  langs:
  - csharp
  - vb
  name: IDataSourceDb
  nameWithType: IDataSourceDb
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb
  type: Interface
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: IDataSourceDb
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 20
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: 'public interface IDataSourceDb : IDisposable'
    content.vb: >-
      Public Interface IDataSourceDb
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1({T})
  - DotNetHelper_Serializer.Interface.IDataSourceDb.DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
  id: ThrowCustomExceptions
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ThrowCustomExceptions
  nameWithType: IDataSourceDb.ThrowCustomExceptions
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ThrowCustomExceptions
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 28
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nSet True If Being Use As Data Access For Public Apis. This Will Hide Thrown Execptions From The Public and return a friendly Message\n"
  example: []
  syntax:
    content: bool ThrowCustomExceptions { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [throw custom exceptions]; otherwise, <code>false</code>.
    content.vb: Property ThrowCustomExceptions As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
  id: Timeout
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: IDataSourceDb.Timeout
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Timeout
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 34
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the timeout for sql command not the connection itself.\n"
  example: []
  syntax:
    content: TimeSpan Timeout { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The timeout.
    content.vb: Property Timeout As TimeSpan
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Database
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Database
  id: Database
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: IDataSourceDb.Database
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Database
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Database
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 40
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nDatabase To Connect TO\n"
  example: []
  syntax:
    content: string Database { get; set; }
    parameters: []
    return:
      type: System.String
      description: The database.
    content.vb: Property Database As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Database*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
  id: ConnectionString
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: IDataSourceDb.ConnectionString
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ConnectionString
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 46
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nConnection String That Will Used To Connect To Server\n"
  example: []
  syntax:
    content: string ConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
      description: The connection string.
    content.vb: Property ConnectionString As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Server
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Server
  id: Server
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Server
  nameWithType: IDataSourceDb.Server
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Server
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Server
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 52
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nServer Name Or IP thats hosting An Sql Instance\n"
  example: []
  syntax:
    content: string Server { get; set; }
    parameters: []
    return:
      type: System.String
      description: The server.
    content.vb: Property Server As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Server*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
  id: IntegratedSecurity
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: IntegratedSecurity
  nameWithType: IDataSourceDb.IntegratedSecurity
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: IntegratedSecurity
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 58
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nUse Integrated Security AKA Windows Authentication\n"
  example: []
  syntax:
    content: bool IntegratedSecurity { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [integrated security]; otherwise, <code>false</code>.
    content.vb: Property IntegratedSecurity As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
  id: AlwaysUseBulkInsert
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: AlwaysUseBulkInsert
  nameWithType: IDataSourceDb.AlwaysUseBulkInsert
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: AlwaysUseBulkInsert
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 63
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nif T1 is true Bulk Insert Will Always be used when the object counts is greater than or equal to  T2\n"
  example: []
  syntax:
    content: (bool UseBulkInsert, int minimumRecordRequiredToUse)AlwaysUseBulkInsert { get; set; }
    parameters: []
    return:
      type: System.ValueTuple{System.Boolean,System.Int32}
    content.vb: Property AlwaysUseBulkInsert As(UseBulkInsert As Boolean, minimumRecordRequiredToUse As Integer)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
  id: UserName
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: UserName
  nameWithType: IDataSourceDb.UserName
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: UserName
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 69
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nUsername that will be used if connection string is null or empty\n"
  example: []
  syntax:
    content: string UserName { get; set; }
    parameters: []
    return:
      type: System.String
      description: The name of the user.
    content.vb: Property UserName As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.UserName*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Password
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Password
  id: Password
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: IDataSourceDb.Password
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Password
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Password
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 75
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nPassword that will be used if connection string is null or empty\n"
  example: []
  syntax:
    content: string Password { get; set; }
    parameters: []
    return:
      type: System.String
      description: The password.
    content.vb: Property Password As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Password*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
  id: IsSqlExpress
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: IsSqlExpress
  nameWithType: IDataSourceDb.IsSqlExpress
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: IsSqlExpress
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 81
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nSet true if Instance is SQLExpress\n"
  example: []
  syntax:
    content: bool IsSqlExpress { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if this instance is SQL express; otherwise, <code>false</code>.
    content.vb: Property IsSqlExpress As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
  id: TableSchema
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: TableSchema
  nameWithType: IDataSourceDb.TableSchema
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: TableSchema
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 87
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nTableSchema To Append to table name\n"
  example: []
  syntax:
    content: string TableSchema { get; set; }
    parameters: []
    return:
      type: System.String
      description: The table schema.
    content.vb: Property TableSchema As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
  id: PersistSecurityInfo
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: PersistSecurityInfo
  nameWithType: IDataSourceDb.PersistSecurityInfo
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: PersistSecurityInfo
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 92
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nOnly Used By OLEDB Connections\n"
  example: []
  syntax:
    content: bool PersistSecurityInfo { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property PersistSecurityInfo As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
  id: JetOledbSystemDatabase
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: JetOledbSystemDatabase
  nameWithType: IDataSourceDb.JetOledbSystemDatabase
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: JetOledbSystemDatabase
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 97
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nOnly Used By OLEDB Connections\n"
  example: []
  syntax:
    content: string JetOledbSystemDatabase { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property JetOledbSystemDatabase As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
  id: Provider
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: IDataSourceDb.Provider
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Provider
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 102
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nOnly Used BY OLEDB Connections \n"
  example: []
  syntax:
    content: string Provider { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Provider As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Provider*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
  id: CreateTablesIfNotExist
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateTablesIfNotExist
  nameWithType: IDataSourceDb.CreateTablesIfNotExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateTablesIfNotExist
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 108
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreate Table If It Doesn&apos;t Exist When Excuting Queries Only Works For Dynamic Execute Methods\n"
  example: []
  syntax:
    content: bool CreateTablesIfNotExist { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [create tables if not exist]; otherwise, <code>false</code>.
    content.vb: Property CreateTablesIfNotExist As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
  id: CreateSchemaIfNotExist
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateSchemaIfNotExist
  nameWithType: IDataSourceDb.CreateSchemaIfNotExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateSchemaIfNotExist
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 114
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreate Schema If It Doesn&apos;t Exist When Excuting Queries\n"
  example: []
  syntax:
    content: bool CreateSchemaIfNotExist { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [create schema if not exist]; otherwise, <code>false</code>.
    content.vb: Property CreateSchemaIfNotExist As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
  id: EnableTransactionRollback
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: EnableTransactionRollback
  nameWithType: IDataSourceDb.EnableTransactionRollback
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: EnableTransactionRollback
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 120
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nRollback Any Batch Data If One Record Fails\n"
  example: []
  syntax:
    content: bool EnableTransactionRollback { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if [enable transaction rollback]; otherwise, <code>false</code>.
    content.vb: Property EnableTransactionRollback As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Port
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Port
  id: Port
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Port
  nameWithType: IDataSourceDb.Port
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Port
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Port
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 126
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the port.\n"
  example: []
  syntax:
    content: int? Port { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: The port.
    content.vb: Property Port As Integer?
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Port*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
  id: QueryBucketManager
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: QueryBucketManager
  nameWithType: IDataSourceDb.QueryBucketManager
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: QueryBucketManager
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 132
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the QueryBucketManger.\n"
  example: []
  syntax:
    content: QueryBucketManager QueryBucketManager { get; set; }
    parameters: []
    return:
      type: DotNetHelper_Serializer.Model.QueryBucketManager
      description: The settings.
    content.vb: Property QueryBucketManager As QueryBucketManager
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
  id: FullFileName
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: FullFileName
  nameWithType: IDataSourceDb.FullFileName
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: FullFileName
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 138
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nFull File Name To The .MDF File\n"
  example: []
  syntax:
    content: string FullFileName { get; set; }
    parameters: []
    return:
      type: System.String
      description: The full name of the file.
    content.vb: Property FullFileName As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
  id: DBTYPE
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: DBTYPE
  nameWithType: IDataSourceDb.DBTYPE
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: DBTYPE
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 144
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the dbtype.\n"
  example: []
  syntax:
    content: DataBaseType DBTYPE { get; }
    parameters: []
    return:
      type: DotNetHelper_Contracts.Enum.DataSource.DataBaseType
      description: The dbtype.
    content.vb: ReadOnly Property DBTYPE As DataBaseType
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
  id: Properties
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: IDataSourceDb.Properties
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Properties
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 150
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the properties.\n"
  example: []
  syntax:
    content: DataSourceProperties Properties { get; set; }
    parameters: []
    return:
      type: DotNetHelper_Serializer.Model.DataSourceProperties
      description: The properties.
    content.vb: Property Properties As DataSourceProperties
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Properties*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
  id: JsonSerializer
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: JsonSerializer
  nameWithType: IDataSourceDb.JsonSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: JsonSerializer
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 155
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the Json Serializer for columns that stores its value as json\n"
  example: []
  syntax:
    content: IJsonSerializer JsonSerializer { get; set; }
    parameters: []
    return:
      type: DotNetHelper_Serializer.Interface.IJsonSerializer
    content.vb: Property JsonSerializer As IJsonSerializer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
  id: XmlSerializer
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: XmlSerializer
  nameWithType: IDataSourceDb.XmlSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: XmlSerializer
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 160
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the Xml Serializer for columns that stores its value as xml\n"
  example: []
  syntax:
    content: IXmlSerializer XmlSerializer { get; set; }
    parameters: []
    return:
      type: DotNetHelper_Serializer.Interface.IXmlSerializer
    content.vb: Property XmlSerializer As IXmlSerializer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
  id: CsvSerializer
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CsvSerializer
  nameWithType: IDataSourceDb.CsvSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CsvSerializer
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 165
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets or sets the Csv Serializer for columns that stores its value as csv\n"
  example: []
  syntax:
    content: ICsvSerializer CsvSerializer { get; set; }
    parameters: []
    return:
      type: DotNetHelper_Serializer.Interface.ICsvSerializer
    content.vb: Property CsvSerializer As ICsvSerializer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
  commentId: P:DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
  id: LastConnectionOpenTime
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: LastConnectionOpenTime
  nameWithType: IDataSourceDb.LastConnectionOpenTime
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
  type: Property
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: LastConnectionOpenTime
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 168
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: DateTime? LastConnectionOpenTime { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Property LastConnectionOpenTime As Date?
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime*
  modifiers.csharp:
  - get
  - set
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.OnSqlException
  commentId: E:DotNetHelper_Serializer.Interface.IDataSourceDb.OnSqlException
  id: OnSqlException
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: OnSqlException
  nameWithType: IDataSourceDb.OnSqlException
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.OnSqlException
  type: Event
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: OnSqlException
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 169
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: event EventHandler OnSqlException
    return:
      type: System.EventHandler
    content.vb: Event OnSqlException As EventHandler
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString
  id: BuildConnectionString
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: BuildConnectionString()
  nameWithType: IDataSourceDb.BuildConnectionString()
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: BuildConnectionString
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 175
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nBuild a SqlConnection String Based On DataSource Properties Will AutoBuild A Connection String If An Connection String Is Not Already Defined\n"
  example: []
  syntax:
    content: string BuildConnectionString()
    return:
      type: System.String
      description: connection string
    content.vb: Function BuildConnectionString As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter(System.String,System.Object)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter(System.String,System.Object)
  id: GetNewParameter(System.String,System.Object)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetNewParameter(String, Object)
  nameWithType: IDataSourceDb.GetNewParameter(String, Object)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetNewParameter
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 177
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: DbParameter GetNewParameter(string parmeterName, object value)
    parameters:
    - id: parmeterName
      type: System.String
    - id: value
      type: System.Object
    return:
      type: System.Data.Common.DbParameter
    content.vb: Function GetNewParameter(parmeterName As String, value As Object) As DbParameter
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection(System.Boolean,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection(System.Boolean,System.Boolean)
  id: GetNewConnection(System.Boolean,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetNewConnection(Boolean, Boolean)
  nameWithType: IDataSourceDb.GetNewConnection(Boolean, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection(System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetNewConnection
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 178
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: IDbConnection GetNewConnection(bool openConnection, bool throwOnFailOpenConnection)
    parameters:
    - id: openConnection
      type: System.Boolean
    - id: throwOnFailOpenConnection
      type: System.Boolean
    return:
      type: System.Data.IDbConnection
    content.vb: Function GetNewConnection(openConnection As Boolean, throwOnFailOpenConnection As Boolean) As IDbConnection
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)
  id: GetNewCommand(System.String,System.Data.IDbConnection,System.Data.IDbTransaction)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetNewCommand(String, IDbConnection, IDbTransaction)
  nameWithType: IDataSourceDb.GetNewCommand(String, IDbConnection, IDbTransaction)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand(System.String, System.Data.IDbConnection, System.Data.IDbTransaction)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetNewCommand
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 179
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: IDbCommand GetNewCommand(string cmdText = null, IDbConnection connection = null, IDbTransaction dbTransaction = null)
    parameters:
    - id: cmdText
      type: System.String
    - id: connection
      type: System.Data.IDbConnection
    - id: dbTransaction
      type: System.Data.IDbTransaction
    return:
      type: System.Data.IDbCommand
    content.vb: Function GetNewCommand(cmdText As String = Nothing, connection As IDbConnection = Nothing, dbTransaction As IDbTransaction = Nothing) As IDbCommand
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties
  id: RefreshDataSourceProperties
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: RefreshDataSourceProperties()
  nameWithType: IDataSourceDb.RefreshDataSourceProperties()
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: RefreshDataSourceProperties
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 186
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nReturns true if the refresh was succesful\n"
  example: []
  syntax:
    content: bool RefreshDataSourceProperties()
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function RefreshDataSourceProperties As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect
  id: CanConnect
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CanConnect()
  nameWithType: IDataSourceDb.CanConnect()
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CanConnect
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 192
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nDetermines whether this instance can connect.\n"
  example: []
  syntax:
    content: bool CanConnect()
    return:
      type: System.Boolean
      description: <code>true</code> if this instance can connect; otherwise, <code>false</code>.
    content.vb: Function CanConnect As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: RecordExist``1(``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: RecordExist<T>(T, String, Expression<Func<T, Object>>)
  nameWithType: IDataSourceDb.RecordExist<T>(T, String, Expression<Func<T, Object>>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist<T>(T, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: RecordExist
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 194
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: >-
      bool RecordExist<T>(T obj, string tableName, Expression<Func<T, object>> overrideKey = null)
          where T : class
    parameters:
    - id: obj
      type: '{T}'
    - id: tableName
      type: System.String
    - id: overrideKey
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Function RecordExist(Of T As Class)(obj As T, tableName As String, overrideKey As Expression(Of Func(Of T, Object)) = Nothing) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist*
  nameWithType.vb: IDataSourceDb.RecordExist(Of T)(T, String, Expression(Of Func(Of T, Object)))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist(Of T)(T, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: RecordExist(Of T)(T, String, Expression(Of Func(Of T, Object)))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Get(System.String,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.Get(System.String,System.String)
  id: Get(System.String,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Get(String, String)
  nameWithType: IDataSourceDb.Get(String, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Get(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Get
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 204
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets the specified table name.\n"
  example: []
  syntax:
    content: IDataReader Get(string tableName, string whereClause = null)
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: whereClause
      type: System.String
      description: The where clause.
    return:
      type: System.Data.IDataReader
      description: IDataReader.
    content.vb: Function Get(tableName As String, whereClause As String = Nothing) As IDataReader
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Get*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne``1(``0,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne``1(``0,System.String)
  id: GetTopOne``1(``0,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetTopOne<T>(T, String)
  nameWithType: IDataSourceDb.GetTopOne<T>(T, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetTopOne
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 213
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGet the Top 1 record where the primary key(s) matches if matching record exist then return default value\n"
  example: []
  syntax:
    content: >-
      T GetTopOne<T>(T obj, string tableName = null)
          where T : class
    parameters:
    - id: obj
      type: '{T}'
      description: only use for key mapping against table
    - id: tableName
      type: System.String
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: '{T}'
      description: ''
    content.vb: Function GetTopOne(Of T As Class)(obj As T, tableName As String = Nothing) As T
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne*
  nameWithType.vb: IDataSourceDb.GetTopOne(Of T)(T, String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne(Of T)(T, System.String)
  name.vb: GetTopOne(Of T)(T, String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Get``1(System.String,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.Get``1(System.String,System.String)
  id: Get``1(System.String,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: Get<T>(String, String)
  nameWithType: IDataSourceDb.Get<T>(String, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Get<T>(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: Get
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 222
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets the specified table name.\n"
  example: []
  syntax:
    content: >-
      List<T> Get<T>(string tableName = null, string whereClause = null)
          where T : class
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: whereClause
      type: System.String
      description: The where clause.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: List&lt;T>.
    content.vb: Function Get(Of T As Class)(tableName As String = Nothing, whereClause As String = Nothing) As List(Of T)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.Get*
  nameWithType.vb: IDataSourceDb.Get(Of T)(String, String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.Get(Of T)(System.String, System.String)
  name.vb: Get(Of T)(String, String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString``1
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString``1
  id: BuildJoinString``1
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: BuildJoinString<T>()
  nameWithType: IDataSourceDb.BuildJoinString<T>()
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString<T>()
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: BuildJoinString
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 230
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: >-
      (string sql, string splitOn)BuildJoinString<T>()
          where T : class
    typeParameters:
    - id: T
    return:
      type: System.ValueTuple{System.String,System.String}
    content.vb: Function BuildJoinString(Of T As Class) As(sql As String, splitOn As String)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString*
  nameWithType.vb: IDataSourceDb.BuildJoinString(Of T)()
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString(Of T)()
  name.vb: BuildJoinString(Of T)()
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters``1(System.String,System.Dynamic.ExpandoObject,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters``1(System.String,System.Dynamic.ExpandoObject,System.String)
  id: GetWithParameters``1(System.String,System.Dynamic.ExpandoObject,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetWithParameters<T>(String, ExpandoObject, String)
  nameWithType: IDataSourceDb.GetWithParameters<T>(String, ExpandoObject, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters<T>(System.String, System.Dynamic.ExpandoObject, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetWithParameters
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 239
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets the specified table name data with dynamically building your where clause from your paramter object\n"
  example: []
  syntax:
    content: >-
      List<T> GetWithParameters<T>(string tableName, ExpandoObject dynamicParameters, string whereClause = null)
          where T : class
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: dynamicParameters
      type: System.Dynamic.ExpandoObject
      description: ''
    - id: whereClause
      type: System.String
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: List&lt;T>.
    content.vb: Function GetWithParameters(Of T As Class)(tableName As String, dynamicParameters As ExpandoObject, whereClause As String = Nothing) As List(Of T)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters*
  nameWithType.vb: IDataSourceDb.GetWithParameters(Of T)(String, ExpandoObject, String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters(Of T)(System.String, System.Dynamic.ExpandoObject, System.String)
  name.vb: GetWithParameters(Of T)(String, ExpandoObject, String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  id: GetLinq``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: GetLinq<T>(Expression<Func<T, Boolean>>, String)
  nameWithType: IDataSourceDb.GetLinq<T>(Expression<Func<T, Boolean>>, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: GetLinq
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 248
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nGets the specified T data filtering using the Linq Expression.\n"
  example: []
  syntax:
    content: >-
      List<T> GetLinq<T>(Expression<Func<T, bool>> whereExpression, string tableName = null)
          where T : class
    parameters:
    - id: whereExpression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: ''
    - id: tableName
      type: System.String
      description: Name of the table.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: List&lt;T>.
    content.vb: Function GetLinq(Of T As Class)(whereExpression As Expression(Of Func(Of T, Boolean)), tableName As String = Nothing) As List(Of T)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq*
  nameWithType.vb: IDataSourceDb.GetLinq(Of T)(Expression(Of Func(Of T, Boolean)), String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.String)
  name.vb: GetLinq(Of T)(Expression(Of Func(Of T, Boolean)), String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteStoredProcedure(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteStoredProcedure(String, List<DbParameter>)
  nameWithType: IDataSourceDb.ExecuteStoredProcedure(String, List<DbParameter>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure(System.String, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteStoredProcedure
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 256
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nExecutes the stored procedure.\n"
  example: []
  syntax:
    content: IDataReader ExecuteStoredProcedure(string procedureName, List<DbParameter> parameters)
    parameters:
    - id: procedureName
      type: System.String
      description: Name of the procedure.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: The parameters.
    return:
      type: System.Data.IDataReader
      description: IDataReader.
    content.vb: Function ExecuteStoredProcedure(procedureName As String, parameters As List(Of DbParameter)) As IDataReader
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure*
  nameWithType.vb: IDataSourceDb.ExecuteStoredProcedure(String, List(Of DbParameter))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure(System.String, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteStoredProcedure(String, List(Of DbParameter))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile(System.String,System.String,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile(System.String,System.String,System.Boolean)
  id: CreateLocalDatabaseFile(System.String,System.String,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateLocalDatabaseFile(String, String, Boolean)
  nameWithType: IDataSourceDb.CreateLocalDatabaseFile(String, String, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateLocalDatabaseFile
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 265
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nConnection String Must Be Valid To Create\n"
  example: []
  syntax:
    content: int CreateLocalDatabaseFile(string fullFilePath, string databaseName, bool overwrite = false)
    parameters:
    - id: fullFilePath
      type: System.String
      description: The full file path.
    - id: databaseName
      type: System.String
      description: Name of the database.
    - id: overwrite
      type: System.Boolean
      description: if set to <code>true</code> [overwrite].
    return:
      type: System.Int32
      description: System.Int32.
    content.vb: Function CreateLocalDatabaseFile(fullFilePath As String, databaseName As String, overwrite As Boolean = False) As Integer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String)
  id: ExecuteManualQuery(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteManualQuery(String)
  nameWithType: IDataSourceDb.ExecuteManualQuery(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteManualQuery
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 273
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nRetrieve A DataReader Of All Records From The Specified Query Please Make Sure You Closed The DataReader When No longer need\n"
  example: []
  syntax:
    content: IDataReader ExecuteManualQuery(string query)
    parameters:
    - id: query
      type: System.String
      description: The query.
    return:
      type: System.Data.IDataReader
      description: IDataReader.
    content.vb: Function ExecuteManualQuery(query As String) As IDataReader
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Sorry Haven&apos;t implemented this yet
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  id: ExecuteManualQuery(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteManualQuery(String, List<DbParameter>)
  nameWithType: IDataSourceDb.ExecuteManualQuery(String, List<DbParameter>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String, System.Collections.Generic.List<System.Data.Common.DbParameter>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteManualQuery
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 281
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nExecutes the manual query.\n"
  example: []
  syntax:
    content: IDataReader ExecuteManualQuery(string query, List<DbParameter> parameters)
    parameters:
    - id: query
      type: System.String
      description: The query.
    - id: parameters
      type: System.Collections.Generic.List{System.Data.Common.DbParameter}
      description: The parameters.
    return:
      type: System.Data.IDataReader
      description: IDataReader.
    content.vb: Function ExecuteManualQuery(query As String, parameters As List(Of DbParameter)) As IDataReader
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery*
  nameWithType.vb: IDataSourceDb.ExecuteManualQuery(String, List(Of DbParameter))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery(System.String, System.Collections.Generic.List(Of System.Data.Common.DbParameter))
  name.vb: ExecuteManualQuery(String, List(Of DbParameter))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.String)
  id: BulkInsert``1(System.Collections.Generic.IEnumerable{``0},System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: BulkInsert<T>(IEnumerable<T>, String)
  nameWithType: IDataSourceDb.BulkInsert<T>(IEnumerable<T>, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert<T>(System.Collections.Generic.IEnumerable<T>, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: BulkInsert
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 290
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nBulks the insert.\n"
  example: []
  syntax:
    content: >-
      int BulkInsert<T>(IEnumerable<T> listPoco, string tableName)
          where T : class
    parameters:
    - id: listPoco
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The list poco.
    - id: tableName
      type: System.String
      description: Name of the table.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: System.Int32.
    content.vb: Function BulkInsert(Of T As Class)(listPoco As IEnumerable(Of T), tableName As String) As Integer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert*
  nameWithType.vb: IDataSourceDb.BulkInsert(Of T)(IEnumerable(Of T), String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String)
  name.vb: BulkInsert(Of T)(IEnumerable(Of T), String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql``1(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql``1(System.String)
  id: ExecuteManualSql``1(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteManualSql<T>(String)
  nameWithType: IDataSourceDb.ExecuteManualSql<T>(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql<T>(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteManualSql
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 298
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nExecutes the manual SQL.\n"
  example: []
  syntax:
    content: >-
      List<T> ExecuteManualSql<T>(string query)
          where T : class
    parameters:
    - id: query
      type: System.String
      description: The query.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{{T}}
      description: List&lt;T>.
    content.vb: Function ExecuteManualSql(Of T As Class)(query As String) As List(Of T)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql*
  nameWithType.vb: IDataSourceDb.ExecuteManualSql(Of T)(String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql(Of T)(System.String)
  name.vb: ExecuteManualSql(Of T)(String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql(System.String)
  id: ExecuteManualNonQuerySql(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteManualNonQuerySql(String)
  nameWithType: IDataSourceDb.ExecuteManualNonQuerySql(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteManualNonQuerySql
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 305
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nExecutes the manual non query SQL.\n"
  example: []
  syntax:
    content: int ExecuteManualNonQuerySql(string query)
    parameters:
    - id: query
      type: System.String
      description: The query.
    return:
      type: System.Int32
      description: System.Int32.
    content.vb: Function ExecuteManualNonQuerySql(query As String) As Integer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass``1(System.String,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass``1(System.String,System.Boolean)
  id: CreateTableFromClass``1(System.String,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateTableFromClass<T>(String, Boolean)
  nameWithType: IDataSourceDb.CreateTableFromClass<T>(String, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass<T>(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateTableFromClass
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 314
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreates the table from class.\n"
  example: []
  syntax:
    content: >-
      bool CreateTableFromClass<T>(string tableName, bool dropIfExist = false)
          where T : class
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: dropIfExist
      type: System.Boolean
      description: if set to <code>true</code> [drop if exist].
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function CreateTableFromClass(Of T As Class)(tableName As String, dropIfExist As Boolean = False) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass*
  nameWithType.vb: IDataSourceDb.CreateTableFromClass(Of T)(String, Boolean)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass(Of T)(System.String, System.Boolean)
  name.vb: CreateTableFromClass(Of T)(String, Boolean)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass(System.Type,System.String,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass(System.Type,System.String,System.Boolean)
  id: CreateTableFromClass(System.Type,System.String,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateTableFromClass(Type, String, Boolean)
  nameWithType: IDataSourceDb.CreateTableFromClass(Type, String, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass(System.Type, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateTableFromClass
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 323
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreates the table from class.\n"
  example: []
  syntax:
    content: bool CreateTableFromClass(Type type, string tableName, bool dropIfExist = false)
    parameters:
    - id: type
      type: System.Type
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: dropIfExist
      type: System.Boolean
      description: if set to <code>true</code> [drop if exist].
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function CreateTableFromClass(type As Type, tableName As String, dropIfExist As Boolean = False) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject``1(``0,System.String,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject``1(``0,System.String,System.Boolean)
  id: CreateTableFromDynamicObject``1(``0,System.String,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateTableFromDynamicObject<T>(T, String, Boolean)
  nameWithType: IDataSourceDb.CreateTableFromDynamicObject<T>(T, String, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject<T>(T, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateTableFromDynamicObject
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 332
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreates the table from a dynamic object .\n"
  example: []
  syntax:
    content: >-
      bool CreateTableFromDynamicObject<T>(T dynamicObject, string tableName, bool dropIfExist = false)
          where T : class
    parameters:
    - id: dynamicObject
      type: '{T}'
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: dropIfExist
      type: System.Boolean
      description: if set to <code>true</code> [drop if exist].
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function CreateTableFromDynamicObject(Of T As Class)(dynamicObject As T, tableName As String, dropIfExist As Boolean = False) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject*
  nameWithType.vb: IDataSourceDb.CreateTableFromDynamicObject(Of T)(T, String, Boolean)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject(Of T)(T, System.String, System.Boolean)
  name.vb: CreateTableFromDynamicObject(Of T)(T, String, Boolean)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable(System.String)
  id: DropTable(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: DropTable(String)
  nameWithType: IDataSourceDb.DropTable(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: DropTable
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 339
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nDrops the table.\n"
  example: []
  syntax:
    content: bool DropTable(string tableName)
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    return:
      type: System.Boolean
      description: <code>true</code> if a table was drop then return true, <code>false</code> otherwise.
    content.vb: Function DropTable(tableName As String) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist(System.String,System.Boolean)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist(System.String,System.Boolean)
  id: SchemaExist(System.String,System.Boolean)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: SchemaExist(String, Boolean)
  nameWithType: IDataSourceDb.SchemaExist(String, Boolean)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: SchemaExist
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 347
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nChecks If Schema Exist\n"
  example: []
  syntax:
    content: bool SchemaExist(string schema, bool createIfFalse = false)
    parameters:
    - id: schema
      type: System.String
      description: The schema.
    - id: createIfFalse
      type: System.Boolean
      description: if set to <code>true</code> [create if false].
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function SchemaExist(schema As String, createIfFalse As Boolean = False) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist(System.String)
  id: TableExist(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: TableExist(String)
  nameWithType: IDataSourceDb.TableExist(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: TableExist
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 354
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCheck If Table Exist Must Include Schema\n"
  example: []
  syntax:
    content: bool TableExist(string tableName)
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function TableExist(tableName As String) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception)
  id: ErrorHandling(System.Exception)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ErrorHandling(Exception)
  nameWithType: IDataSourceDb.ErrorHandling(Exception)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ErrorHandling
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 361
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nErrors the handling.\n"
  example: []
  syntax:
    content: Exception ErrorHandling(Exception error)
    parameters:
    - id: error
      type: System.Exception
      description: The error.
    return:
      type: System.Exception
      description: Exception.
    content.vb: Function ErrorHandling(error As Exception) As Exception
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception,System.String)
  id: ErrorHandling(System.Exception,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ErrorHandling(Exception, String)
  nameWithType: IDataSourceDb.ErrorHandling(Exception, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling(System.Exception, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ErrorHandling
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 368
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nErrors the handling.\n"
  example: []
  syntax:
    content: Exception ErrorHandling(Exception error, string sql)
    parameters:
    - id: error
      type: System.Exception
      description: The error.
    - id: sql
      type: System.String
    return:
      type: System.Exception
      description: Exception.
    content.vb: Function ErrorHandling(error As Exception, sql As String) As Exception
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime(System.Data.IDbConnection,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime(System.Data.IDbConnection,System.String)
  id: LogConnectionTime(System.Data.IDbConnection,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: LogConnectionTime(IDbConnection, String)
  nameWithType: IDataSourceDb.LogConnectionTime(IDbConnection, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime(System.Data.IDbConnection, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: LogConnectionTime
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 376
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nLogs the connection time.\n"
  example: []
  syntax:
    content: QueryBucket LogConnectionTime(IDbConnection connection, string query)
    parameters:
    - id: connection
      type: System.Data.IDbConnection
      description: The connection.
    - id: query
      type: System.String
      description: The query.
    return:
      type: DotNetHelper_Serializer.Model.QueryBucket
      description: QueryBucket.
    content.vb: Function LogConnectionTime(connection As IDbConnection, query As String) As QueryBucket
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.IEnumerable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.IEnumerable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.IEnumerable{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteDynamicQuery<T>(ActionType, IEnumerable<T>, String, Expression<Func<T, Object>>)
  nameWithType: IDataSourceDb.ExecuteDynamicQuery<T>(ActionType, IEnumerable<T>, String, Expression<Func<T, Object>>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery<T>(DotNetHelper_Contracts.Enum.DataSource.ActionType, System.Collections.Generic.IEnumerable<T>, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteDynamicQuery
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 387
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nExecutes the dynamic query.\n"
  example: []
  syntax:
    content: >-
      int ExecuteDynamicQuery<T>(ActionType type, IEnumerable<T> poco, string tableName = null, Expression<Func<T, object>> overrideKeys = null)
          where T : class
    parameters:
    - id: type
      type: DotNetHelper_Contracts.Enum.DataSource.ActionType
      description: Type Of Query To Execute
    - id: poco
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The Object To Execute Against
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: overrideKeys
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Int32
      description: Returns Record Affected
    content.vb: Function ExecuteDynamicQuery(Of T As Class)(type As ActionType, poco As IEnumerable(Of T), tableName As String = Nothing, overrideKeys As Expression(Of Func(Of T, Object)) = Nothing) As Integer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: type - null
  nameWithType.vb: IDataSourceDb.ExecuteDynamicQuery(Of T)(ActionType, IEnumerable(Of T), String, Expression(Of Func(Of T, Object)))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery(Of T)(DotNetHelper_Contracts.Enum.DataSource.ActionType, System.Collections.Generic.IEnumerable(Of T), System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ExecuteDynamicQuery(Of T)(ActionType, IEnumerable(Of T), String, Expression(Of Func(Of T, Object)))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: ExecuteDynamicQuery``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteDynamicQuery<T>(ActionType, T, String, Expression<Func<T, Object>>)
  nameWithType: IDataSourceDb.ExecuteDynamicQuery<T>(ActionType, T, String, Expression<Func<T, Object>>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery<T>(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.String, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteDynamicQuery
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 399
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: >-
      int ExecuteDynamicQuery<T>(ActionType type, T poco, string tableName = null, Expression<Func<T, object>> overrideKeys = null)
          where T : class
    parameters:
    - id: type
      type: DotNetHelper_Contracts.Enum.DataSource.ActionType
    - id: poco
      type: '{T}'
    - id: tableName
      type: System.String
    - id: overrideKeys
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Function ExecuteDynamicQuery(Of T As Class)(type As ActionType, poco As T, tableName As String = Nothing, overrideKeys As Expression(Of Func(Of T, Object)) = Nothing) As Integer
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery*
  nameWithType.vb: IDataSourceDb.ExecuteDynamicQuery(Of T)(ActionType, T, String, Expression(Of Func(Of T, Object)))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery(Of T)(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.String, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ExecuteDynamicQuery(Of T)(ActionType, T, String, Expression(Of Func(Of T, Object)))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)
  id: ExecuteDynamicQueryWithOutputs``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteDynamicQueryWithOutputs<T>(ActionType, T, Expression<Func<T, Object>>, String)
  nameWithType: IDataSourceDb.ExecuteDynamicQueryWithOutputs<T>(ActionType, T, Expression<Func<T, Object>>, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs<T>(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.Linq.Expressions.Expression<System.Func<T, System.Object>>, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteDynamicQueryWithOutputs
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 411
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: >-
      IDataReader ExecuteDynamicQueryWithOutputs<T>(ActionType type, T poco, Expression<Func<T, object>> expression, string tableName = null)
          where T : class
    parameters:
    - id: type
      type: DotNetHelper_Contracts.Enum.DataSource.ActionType
    - id: poco
      type: '{T}'
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
    - id: tableName
      type: System.String
    typeParameters:
    - id: T
    return:
      type: System.Data.IDataReader
    content.vb: Function ExecuteDynamicQueryWithOutputs(Of T As Class)(type As ActionType, poco As T, expression As Expression(Of Func(Of T, Object)), tableName As String = Nothing) As IDataReader
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs*
  nameWithType.vb: IDataSourceDb.ExecuteDynamicQueryWithOutputs(Of T)(ActionType, T, Expression(Of Func(Of T, Object)), String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs(Of T)(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), System.String)
  name.vb: ExecuteDynamicQueryWithOutputs(Of T)(ActionType, T, Expression(Of Func(Of T, Object)), String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String)
  id: ExecuteDynamicQueryReturnIdentity``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,``0,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ExecuteDynamicQueryReturnIdentity<T>(ActionType, T, String)
  nameWithType: IDataSourceDb.ExecuteDynamicQueryReturnIdentity<T>(ActionType, T, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity<T>(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ExecuteDynamicQueryReturnIdentity
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 423
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: >-
      T ExecuteDynamicQueryReturnIdentity<T>(ActionType type, T poco, string tableName = null)
          where T : class
    parameters:
    - id: type
      type: DotNetHelper_Contracts.Enum.DataSource.ActionType
    - id: poco
      type: '{T}'
    - id: tableName
      type: System.String
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function ExecuteDynamicQueryReturnIdentity(Of T As Class)(type As ActionType, poco As T, tableName As String = Nothing) As T
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity*
  nameWithType.vb: IDataSourceDb.ExecuteDynamicQueryReturnIdentity(Of T)(ActionType, T, String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity(Of T)(DotNetHelper_Contracts.Enum.DataSource.ActionType, T, System.String)
  name.vb: ExecuteDynamicQueryReturnIdentity(Of T)(ActionType, T, String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable(System.Data.DataTable,System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable(System.Data.DataTable,System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs})
  id: BulkInsertDataTable(System.Data.DataTable,System.Data.SqlClient.SqlBulkCopyOptions,System.String,System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: BulkInsertDataTable(DataTable, SqlBulkCopyOptions, String, Action<SqlRowsCopiedEventArgs>)
  nameWithType: IDataSourceDb.BulkInsertDataTable(DataTable, SqlBulkCopyOptions, String, Action<SqlRowsCopiedEventArgs>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable(System.Data.DataTable, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Action<System.Data.SqlClient.SqlRowsCopiedEventArgs>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: BulkInsertDataTable
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 425
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  syntax:
    content: void BulkInsertDataTable(DataTable table, SqlBulkCopyOptions options, string destinationTableName = null, Action<SqlRowsCopiedEventArgs> callback = null)
    parameters:
    - id: table
      type: System.Data.DataTable
    - id: options
      type: System.Data.SqlClient.SqlBulkCopyOptions
    - id: destinationTableName
      type: System.String
    - id: callback
      type: System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs}
    content.vb: Sub BulkInsertDataTable(table As DataTable, options As SqlBulkCopyOptions, destinationTableName As String = Nothing, callback As Action(Of SqlRowsCopiedEventArgs) = Nothing)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable*
  nameWithType.vb: IDataSourceDb.BulkInsertDataTable(DataTable, SqlBulkCopyOptions, String, Action(Of SqlRowsCopiedEventArgs))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable(System.Data.DataTable, System.Data.SqlClient.SqlBulkCopyOptions, System.String, System.Action(Of System.Data.SqlClient.SqlRowsCopiedEventArgs))
  name.vb: BulkInsertDataTable(DataTable, SqlBulkCopyOptions, String, Action(Of SqlRowsCopiedEventArgs))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.List{``0},System.String,DotNetHelper_Contracts.Enum.DataSource.ScriptType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.List{``0},System.String,DotNetHelper_Contracts.Enum.DataSource.ScriptType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: CreateScripts``1(DotNetHelper_Contracts.Enum.DataSource.ActionType,System.Collections.Generic.List{``0},System.String,DotNetHelper_Contracts.Enum.DataSource.ScriptType,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: CreateScripts<T>(ActionType, List<T>, String, ScriptType, Expression<Func<T, Object>>)
  nameWithType: IDataSourceDb.CreateScripts<T>(ActionType, List<T>, String, ScriptType, Expression<Func<T, Object>>)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts<T>(DotNetHelper_Contracts.Enum.DataSource.ActionType, System.Collections.Generic.List<T>, System.String, DotNetHelper_Contracts.Enum.DataSource.ScriptType, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: CreateScripts
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 437
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nCreates the scripts.\n"
  example: []
  syntax:
    content: >-
      List<string> CreateScripts<T>(ActionType scriptsType, List<T> objects, string tableName = null, ScriptType type = ScriptType.HumanReadable, Expression<Func<T, object>> overrideKeys = null)
          where T : class
    parameters:
    - id: scriptsType
      type: DotNetHelper_Contracts.Enum.DataSource.ActionType
      description: Type of the scripts.
    - id: objects
      type: System.Collections.Generic.List{{T}}
      description: The objects.
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: type
      type: DotNetHelper_Contracts.Enum.DataSource.ScriptType
      description: The type.
    - id: overrideKeys
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Collections.Generic.List{System.String}
      description: List&lt;System.String>.
    content.vb: Function CreateScripts(Of T As Class)(scriptsType As ActionType, objects As List(Of T), tableName As String = Nothing, type As ScriptType = ScriptType.HumanReadable, overrideKeys As Expression(Of Func(Of T, Object)) = Nothing) As List(Of String)
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: type - null
  nameWithType.vb: IDataSourceDb.CreateScripts(Of T)(ActionType, List(Of T), String, ScriptType, Expression(Of Func(Of T, Object)))
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts(Of T)(DotNetHelper_Contracts.Enum.DataSource.ActionType, System.Collections.Generic.List(Of T), System.String, DotNetHelper_Contracts.Enum.DataSource.ScriptType, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: CreateScripts(Of T)(ActionType, List(Of T), String, ScriptType, Expression(Of Func(Of T, Object)))
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile(System.String,System.String,DotNetHelper_IO.Enum.FileOption,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile(System.String,System.String,DotNetHelper_IO.Enum.FileOption,System.String)
  id: DumpTableDataToFile(System.String,System.String,DotNetHelper_IO.Enum.FileOption,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: DumpTableDataToFile(String, String, FileOption, String)
  nameWithType: IDataSourceDb.DumpTableDataToFile(String, String, FileOption, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile(System.String, System.String, DotNetHelper_IO.Enum.FileOption, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: DumpTableDataToFile
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 447
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nDumps the table data to file.\n"
  example: []
  syntax:
    content: bool DumpTableDataToFile(string fullFilePath, string tableName, FileOption option, string whereClause = null)
    parameters:
    - id: fullFilePath
      type: System.String
      description: The full file path.
    - id: tableName
      type: System.String
      description: Name of the table.
    - id: option
      type: DotNetHelper_IO.Enum.FileOption
      description: The option.
    - id: whereClause
      type: System.String
      description: The where clause.
    return:
      type: System.Boolean
      description: <code>true</code> if XXXX, <code>false</code> otherwise.
    content.vb: Function DumpTableDataToFile(fullFilePath As String, tableName As String, option As FileOption, whereClause As String = Nothing) As Boolean
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass(System.String)
  id: ScriptTableToCSharpClass(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ScriptTableToCSharpClass(String)
  nameWithType: IDataSourceDb.ScriptTableToCSharpClass(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ScriptTableToCSharpClass
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 455
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nScripts the table to c sharp class.\n"
  example: []
  syntax:
    content: string ScriptTableToCSharpClass(string tableName)
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    return:
      type: System.String
      description: System.String.
    content.vb: Function ScriptTableToCSharpClass(tableName As String) As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass(System.String,System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass(System.String,System.String)
  id: ScriptQueryToCSharpClass(System.String,System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ScriptQueryToCSharpClass(String, String)
  nameWithType: IDataSourceDb.ScriptQueryToCSharpClass(String, String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ScriptQueryToCSharpClass
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 464
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nScripts the query to c sharp class.\n"
  example: []
  syntax:
    content: string ScriptQueryToCSharpClass(string query, string className = null)
    parameters:
    - id: query
      type: System.String
      description: The query.
    - id: className
      type: System.String
      description: Name of the class.
    return:
      type: System.String
      description: System.String.
    content.vb: Function ScriptQueryToCSharpClass(query As String, className As String = Nothing) As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass*
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql``1(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql``1(System.String)
  id: ScriptCSharpClassToTsql``1(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: ScriptCSharpClassToTsql<T>(String)
  nameWithType: IDataSourceDb.ScriptCSharpClassToTsql<T>(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql<T>(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: ScriptCSharpClassToTsql
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 473
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nScripts the c sharp class to TSQL.\n"
  example: []
  syntax:
    content: >-
      string ScriptCSharpClassToTsql<T>(string tableName = null)
          where T : class
    parameters:
    - id: tableName
      type: System.String
      description: Name of the table.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.String
      description: System.String.
    content.vb: Function ScriptCSharpClassToTsql(Of T As Class)(tableName As String = Nothing) As String
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql*
  nameWithType.vb: IDataSourceDb.ScriptCSharpClassToTsql(Of T)(String)
  fullName.vb: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql(Of T)(System.String)
  name.vb: ScriptCSharpClassToTsql(Of T)(String)
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType(System.String)
  commentId: M:DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType(System.String)
  id: DBTypeToDotNetType(System.String)
  parent: DotNetHelper_Serializer.Interface.IDataSourceDb
  langs:
  - csharp
  - vb
  name: DBTypeToDotNetType(String)
  nameWithType: IDataSourceDb.DBTypeToDotNetType(String)
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType(System.String)
  type: Method
  source:
    remote:
      path: src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
      branch: master
      repo: https://github.com/TheMofaDe/DotNetHelper-Serializer
    id: DBTypeToDotNetType
    path: ../src/DotNetHelper-Serializer/Interface/IDataSourceDb.cs
    startLine: 480
  assemblies:
  - DotNetHelper-Serializer
  namespace: DotNetHelper_Serializer.Interface
  summary: "\nDatabases the type of the type to dot net.\n"
  example: []
  syntax:
    content: Type DBTypeToDotNetType(string type)
    parameters:
    - id: type
      type: System.String
      description: The type.
    return:
      type: System.Type
      description: Type.
    content.vb: Function DBTypeToDotNetType(type As String) As Type
  overload: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType*
references:
- uid: DotNetHelper_Serializer.Interface
  commentId: N:DotNetHelper_Serializer.Interface
  name: DotNetHelper_Serializer.Interface
  nameWithType: DotNetHelper_Serializer.Interface
  fullName: DotNetHelper_Serializer.Interface
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1({T})
  commentId: M:DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
  parent: DotNetHelper_Serializer.Extension.IDataSourceDBExtension
  definition: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
  name: BuildDbParameterList<T>(T)
  nameWithType: IDataSourceDBExtension.BuildDbParameterList<T>(T)
  fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList<T>(T)
  nameWithType.vb: IDataSourceDBExtension.BuildDbParameterList(Of T)(T)
  fullName.vb: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList(Of T)(T)
  name.vb: BuildDbParameterList(Of T)(T)
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(``0)
    name: BuildDbParameterList<T>
    nameWithType: IDataSourceDBExtension.BuildDbParameterList<T>
    fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(``0)
    name: BuildDbParameterList(Of T)
    nameWithType: IDataSourceDBExtension.BuildDbParameterList(Of T)
    fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
  commentId: M:DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  parent: DotNetHelper_Serializer.Extension.TypeExtension
  definition: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  name: CanHaveNullValue<IDataSourceDb>()
  nameWithType: TypeExtension.CanHaveNullValue<IDataSourceDb>()
  fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<DotNetHelper_Serializer.Interface.IDataSourceDb>()
  nameWithType.vb: TypeExtension.CanHaveNullValue(Of IDataSourceDb)()
  fullName.vb: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of DotNetHelper_Serializer.Interface.IDataSourceDb)()
  name.vb: CanHaveNullValue(Of IDataSourceDb)()
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
    name: CanHaveNullValue<IDataSourceDb>
    nameWithType: TypeExtension.CanHaveNullValue<IDataSourceDb>
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<DotNetHelper_Serializer.Interface.IDataSourceDb>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1
    name: CanHaveNullValue(Of IDataSourceDb)
    nameWithType: TypeExtension.CanHaveNullValue(Of IDataSourceDb)
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of DotNetHelper_Serializer.Interface.IDataSourceDb)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
  commentId: M:DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
  name: BuildDbParameterList<T>(IDataSourceDb, T)
  nameWithType: IDataSourceDBExtension.BuildDbParameterList<T>(IDataSourceDb, T)
  fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList<T>(DotNetHelper_Serializer.Interface.IDataSourceDb, T)
  nameWithType.vb: IDataSourceDBExtension.BuildDbParameterList(Of T)(IDataSourceDb, T)
  fullName.vb: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList(Of T)(DotNetHelper_Serializer.Interface.IDataSourceDb, T)
  name.vb: BuildDbParameterList(Of T)(IDataSourceDb, T)
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
    name: BuildDbParameterList<T>
    nameWithType: IDataSourceDBExtension.BuildDbParameterList<T>
    fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotNetHelper_Serializer.Interface.IDataSourceDb
    name: IDataSourceDb
    nameWithType: IDataSourceDb
    fullName: DotNetHelper_Serializer.Interface.IDataSourceDb
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList``1(DotNetHelper_Serializer.Interface.IDataSourceDb,``0)
    name: BuildDbParameterList(Of T)
    nameWithType: IDataSourceDBExtension.BuildDbParameterList(Of T)
    fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension.BuildDbParameterList(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: DotNetHelper_Serializer.Interface.IDataSourceDb
    name: IDataSourceDb
    nameWithType: IDataSourceDb
    fullName: DotNetHelper_Serializer.Interface.IDataSourceDb
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Extension.IDataSourceDBExtension
  commentId: T:DotNetHelper_Serializer.Extension.IDataSourceDBExtension
  parent: DotNetHelper_Serializer.Extension
  name: IDataSourceDBExtension
  nameWithType: IDataSourceDBExtension
  fullName: DotNetHelper_Serializer.Extension.IDataSourceDBExtension
- uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  commentId: M:DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
  name: CanHaveNullValue<T>(T)
  nameWithType: TypeExtension.CanHaveNullValue<T>(T)
  fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<T>(T)
  nameWithType.vb: TypeExtension.CanHaveNullValue(Of T)(T)
  fullName.vb: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of T)(T)
  name.vb: CanHaveNullValue(Of T)(T)
  spec.csharp:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
    name: CanHaveNullValue<T>
    nameWithType: TypeExtension.CanHaveNullValue<T>
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue``1(``0)
    name: CanHaveNullValue(Of T)
    nameWithType: TypeExtension.CanHaveNullValue(Of T)
    fullName: DotNetHelper_Serializer.Extension.TypeExtension.CanHaveNullValue(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Extension.TypeExtension
  commentId: T:DotNetHelper_Serializer.Extension.TypeExtension
  parent: DotNetHelper_Serializer.Extension
  name: TypeExtension
  nameWithType: TypeExtension
  fullName: DotNetHelper_Serializer.Extension.TypeExtension
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DotNetHelper_Serializer.Extension
  commentId: N:DotNetHelper_Serializer.Extension
  name: DotNetHelper_Serializer.Extension
  nameWithType: DotNetHelper_Serializer.Extension
  fullName: DotNetHelper_Serializer.Extension
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
  name: ThrowCustomExceptions
  nameWithType: IDataSourceDb.ThrowCustomExceptions
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ThrowCustomExceptions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
  name: Timeout
  nameWithType: IDataSourceDb.Timeout
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Timeout
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Database*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Database
  name: Database
  nameWithType: IDataSourceDb.Database
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Database
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
  name: ConnectionString
  nameWithType: IDataSourceDb.ConnectionString
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ConnectionString
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Server*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Server
  name: Server
  nameWithType: IDataSourceDb.Server
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Server
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
  name: IntegratedSecurity
  nameWithType: IDataSourceDb.IntegratedSecurity
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.IntegratedSecurity
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
  name: AlwaysUseBulkInsert
  nameWithType: IDataSourceDb.AlwaysUseBulkInsert
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.AlwaysUseBulkInsert
- uid: System.ValueTuple{System.Boolean,System.Int32}
  commentId: T:System.ValueTuple{System.Boolean,System.Int32}
  parent: System
  isExternal: true
  name: ValueTuple<Boolean, Int32>
  nameWithType: ValueTuple<Boolean, Int32>
  fullName: System.ValueTuple<System.Boolean, System.Int32>
  nameWithType.vb: ValueTuple(Of Boolean, Int32)
  fullName.vb: System.ValueTuple(Of System.Boolean, System.Int32)
  name.vb: ValueTuple(Of Boolean, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.UserName*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
  name: UserName
  nameWithType: IDataSourceDb.UserName
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.UserName
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Password*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Password
  name: Password
  nameWithType: IDataSourceDb.Password
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Password
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
  name: IsSqlExpress
  nameWithType: IDataSourceDb.IsSqlExpress
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.IsSqlExpress
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
  name: TableSchema
  nameWithType: IDataSourceDb.TableSchema
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.TableSchema
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
  name: PersistSecurityInfo
  nameWithType: IDataSourceDb.PersistSecurityInfo
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.PersistSecurityInfo
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
  name: JetOledbSystemDatabase
  nameWithType: IDataSourceDb.JetOledbSystemDatabase
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.JetOledbSystemDatabase
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Provider*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
  name: Provider
  nameWithType: IDataSourceDb.Provider
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Provider
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
  name: CreateTablesIfNotExist
  nameWithType: IDataSourceDb.CreateTablesIfNotExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTablesIfNotExist
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
  name: CreateSchemaIfNotExist
  nameWithType: IDataSourceDb.CreateSchemaIfNotExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateSchemaIfNotExist
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
  name: EnableTransactionRollback
  nameWithType: IDataSourceDb.EnableTransactionRollback
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.EnableTransactionRollback
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Port*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Port
  name: Port
  nameWithType: IDataSourceDb.Port
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Port
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
  name: QueryBucketManager
  nameWithType: IDataSourceDb.QueryBucketManager
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.QueryBucketManager
- uid: DotNetHelper_Serializer.Model.QueryBucketManager
  commentId: T:DotNetHelper_Serializer.Model.QueryBucketManager
  parent: DotNetHelper_Serializer.Model
  name: QueryBucketManager
  nameWithType: QueryBucketManager
  fullName: DotNetHelper_Serializer.Model.QueryBucketManager
- uid: DotNetHelper_Serializer.Model
  commentId: N:DotNetHelper_Serializer.Model
  name: DotNetHelper_Serializer.Model
  nameWithType: DotNetHelper_Serializer.Model
  fullName: DotNetHelper_Serializer.Model
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
  name: FullFileName
  nameWithType: IDataSourceDb.FullFileName
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.FullFileName
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
  name: DBTYPE
  nameWithType: IDataSourceDb.DBTYPE
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTYPE
- uid: DotNetHelper_Contracts.Enum.DataSource.DataBaseType
  commentId: T:DotNetHelper_Contracts.Enum.DataSource.DataBaseType
  parent: DotNetHelper_Contracts.Enum.DataSource
  isExternal: true
  name: DataBaseType
  nameWithType: DataBaseType
  fullName: DotNetHelper_Contracts.Enum.DataSource.DataBaseType
- uid: DotNetHelper_Contracts.Enum.DataSource
  commentId: N:DotNetHelper_Contracts.Enum.DataSource
  isExternal: true
  name: DotNetHelper_Contracts.Enum.DataSource
  nameWithType: DotNetHelper_Contracts.Enum.DataSource
  fullName: DotNetHelper_Contracts.Enum.DataSource
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Properties*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
  name: Properties
  nameWithType: IDataSourceDb.Properties
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Properties
- uid: DotNetHelper_Serializer.Model.DataSourceProperties
  commentId: T:DotNetHelper_Serializer.Model.DataSourceProperties
  parent: DotNetHelper_Serializer.Model
  name: DataSourceProperties
  nameWithType: DataSourceProperties
  fullName: DotNetHelper_Serializer.Model.DataSourceProperties
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
  name: JsonSerializer
  nameWithType: IDataSourceDb.JsonSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.JsonSerializer
- uid: DotNetHelper_Serializer.Interface.IJsonSerializer
  commentId: T:DotNetHelper_Serializer.Interface.IJsonSerializer
  parent: DotNetHelper_Serializer.Interface
  name: IJsonSerializer
  nameWithType: IJsonSerializer
  fullName: DotNetHelper_Serializer.Interface.IJsonSerializer
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
  name: XmlSerializer
  nameWithType: IDataSourceDb.XmlSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.XmlSerializer
- uid: DotNetHelper_Serializer.Interface.IXmlSerializer
  commentId: T:DotNetHelper_Serializer.Interface.IXmlSerializer
  parent: DotNetHelper_Serializer.Interface
  name: IXmlSerializer
  nameWithType: IXmlSerializer
  fullName: DotNetHelper_Serializer.Interface.IXmlSerializer
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
  name: CsvSerializer
  nameWithType: IDataSourceDb.CsvSerializer
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CsvSerializer
- uid: DotNetHelper_Serializer.Interface.ICsvSerializer
  commentId: T:DotNetHelper_Serializer.Interface.ICsvSerializer
  parent: DotNetHelper_Serializer.Interface
  name: ICsvSerializer
  nameWithType: ICsvSerializer
  fullName: DotNetHelper_Serializer.Interface.ICsvSerializer
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
  name: LastConnectionOpenTime
  nameWithType: IDataSourceDb.LastConnectionOpenTime
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.LastConnectionOpenTime
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString
  name: BuildConnectionString
  nameWithType: IDataSourceDb.BuildConnectionString
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildConnectionString
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter
  name: GetNewParameter
  nameWithType: IDataSourceDb.GetNewParameter
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewParameter
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: true
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection
  name: GetNewConnection
  nameWithType: IDataSourceDb.GetNewConnection
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewConnection
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  parent: System.Data
  isExternal: true
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand
  name: GetNewCommand
  nameWithType: IDataSourceDb.GetNewCommand
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetNewCommand
- uid: System.Data.IDbTransaction
  commentId: T:System.Data.IDbTransaction
  parent: System.Data
  isExternal: true
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbCommand
  commentId: T:System.Data.IDbCommand
  parent: System.Data
  isExternal: true
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties
  name: RefreshDataSourceProperties
  nameWithType: IDataSourceDb.RefreshDataSourceProperties
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.RefreshDataSourceProperties
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect
  name: CanConnect
  nameWithType: IDataSourceDb.CanConnect
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CanConnect
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist
  name: RecordExist
  nameWithType: IDataSourceDb.RecordExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.RecordExist
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.Get*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.Get
  name: Get
  nameWithType: IDataSourceDb.Get
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.Get
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: true
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne
  name: GetTopOne
  nameWithType: IDataSourceDb.GetTopOne
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetTopOne
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString
  name: BuildJoinString
  nameWithType: IDataSourceDb.BuildJoinString
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BuildJoinString
- uid: System.ValueTuple{System.String,System.String}
  commentId: T:System.ValueTuple{System.String,System.String}
  parent: System
  isExternal: true
  name: ValueTuple<String, String>
  nameWithType: ValueTuple<String, String>
  fullName: System.ValueTuple<System.String, System.String>
  nameWithType.vb: ValueTuple(Of String, String)
  fullName.vb: System.ValueTuple(Of System.String, System.String)
  name.vb: ValueTuple(Of String, String)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters
  name: GetWithParameters
  nameWithType: IDataSourceDb.GetWithParameters
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetWithParameters
- uid: System.Dynamic.ExpandoObject
  commentId: T:System.Dynamic.ExpandoObject
  parent: System.Dynamic
  isExternal: true
  name: ExpandoObject
  nameWithType: ExpandoObject
  fullName: System.Dynamic.ExpandoObject
- uid: System.Dynamic
  commentId: N:System.Dynamic
  isExternal: true
  name: System.Dynamic
  nameWithType: System.Dynamic
  fullName: System.Dynamic
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq
  name: GetLinq
  nameWithType: IDataSourceDb.GetLinq
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.GetLinq
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure
  name: ExecuteStoredProcedure
  nameWithType: IDataSourceDb.ExecuteStoredProcedure
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteStoredProcedure
- uid: System.Collections.Generic.List{System.Data.Common.DbParameter}
  commentId: T:System.Collections.Generic.List{System.Data.Common.DbParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<DbParameter>
  nameWithType: List<DbParameter>
  fullName: System.Collections.Generic.List<System.Data.Common.DbParameter>
  nameWithType.vb: List(Of DbParameter)
  fullName.vb: System.Collections.Generic.List(Of System.Data.Common.DbParameter)
  name.vb: List(Of DbParameter)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.Common.DbParameter
    name: DbParameter
    nameWithType: DbParameter
    fullName: System.Data.Common.DbParameter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile
  name: CreateLocalDatabaseFile
  nameWithType: IDataSourceDb.CreateLocalDatabaseFile
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateLocalDatabaseFile
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery
  name: ExecuteManualQuery
  nameWithType: IDataSourceDb.ExecuteManualQuery
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualQuery
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert
  name: BulkInsert
  nameWithType: IDataSourceDb.BulkInsert
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsert
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql
  name: ExecuteManualSql
  nameWithType: IDataSourceDb.ExecuteManualSql
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualSql
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql
  name: ExecuteManualNonQuerySql
  nameWithType: IDataSourceDb.ExecuteManualNonQuerySql
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteManualNonQuerySql
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass
  name: CreateTableFromClass
  nameWithType: IDataSourceDb.CreateTableFromClass
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromClass
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject
  name: CreateTableFromDynamicObject
  nameWithType: IDataSourceDb.CreateTableFromDynamicObject
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateTableFromDynamicObject
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable
  name: DropTable
  nameWithType: IDataSourceDb.DropTable
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DropTable
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist
  name: SchemaExist
  nameWithType: IDataSourceDb.SchemaExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.SchemaExist
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist
  name: TableExist
  nameWithType: IDataSourceDb.TableExist
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.TableExist
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling
  name: ErrorHandling
  nameWithType: IDataSourceDb.ErrorHandling
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ErrorHandling
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime
  name: LogConnectionTime
  nameWithType: IDataSourceDb.LogConnectionTime
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.LogConnectionTime
- uid: DotNetHelper_Serializer.Model.QueryBucket
  commentId: T:DotNetHelper_Serializer.Model.QueryBucket
  parent: DotNetHelper_Serializer.Model
  name: QueryBucket
  nameWithType: QueryBucket
  fullName: DotNetHelper_Serializer.Model.QueryBucket
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery
  name: ExecuteDynamicQuery
  nameWithType: IDataSourceDb.ExecuteDynamicQuery
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQuery
- uid: DotNetHelper_Contracts.Enum.DataSource.ActionType
  commentId: T:DotNetHelper_Contracts.Enum.DataSource.ActionType
  parent: DotNetHelper_Contracts.Enum.DataSource
  isExternal: true
  name: ActionType
  nameWithType: ActionType
  fullName: DotNetHelper_Contracts.Enum.DataSource.ActionType
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs
  name: ExecuteDynamicQueryWithOutputs
  nameWithType: IDataSourceDb.ExecuteDynamicQueryWithOutputs
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryWithOutputs
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity
  name: ExecuteDynamicQueryReturnIdentity
  nameWithType: IDataSourceDb.ExecuteDynamicQueryReturnIdentity
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ExecuteDynamicQueryReturnIdentity
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable
  name: BulkInsertDataTable
  nameWithType: IDataSourceDb.BulkInsertDataTable
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.BulkInsertDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  commentId: T:System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs}
  commentId: T:System.Action{System.Data.SqlClient.SqlRowsCopiedEventArgs}
  parent: System
  definition: System.Action`1
  name: Action<SqlRowsCopiedEventArgs>
  nameWithType: Action<SqlRowsCopiedEventArgs>
  fullName: System.Action<System.Data.SqlClient.SqlRowsCopiedEventArgs>
  nameWithType.vb: Action(Of SqlRowsCopiedEventArgs)
  fullName.vb: System.Action(Of System.Data.SqlClient.SqlRowsCopiedEventArgs)
  name.vb: Action(Of SqlRowsCopiedEventArgs)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.SqlClient.SqlRowsCopiedEventArgs
    name: SqlRowsCopiedEventArgs
    nameWithType: SqlRowsCopiedEventArgs
    fullName: System.Data.SqlClient.SqlRowsCopiedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.SqlClient.SqlRowsCopiedEventArgs
    name: SqlRowsCopiedEventArgs
    nameWithType: SqlRowsCopiedEventArgs
    fullName: System.Data.SqlClient.SqlRowsCopiedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
  isExternal: true
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts
  name: CreateScripts
  nameWithType: IDataSourceDb.CreateScripts
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.CreateScripts
- uid: DotNetHelper_Contracts.Enum.DataSource.ScriptType
  commentId: T:DotNetHelper_Contracts.Enum.DataSource.ScriptType
  parent: DotNetHelper_Contracts.Enum.DataSource
  isExternal: true
  name: ScriptType
  nameWithType: ScriptType
  fullName: DotNetHelper_Contracts.Enum.DataSource.ScriptType
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile
  name: DumpTableDataToFile
  nameWithType: IDataSourceDb.DumpTableDataToFile
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DumpTableDataToFile
- uid: DotNetHelper_IO.Enum.FileOption
  commentId: T:DotNetHelper_IO.Enum.FileOption
  parent: DotNetHelper_IO.Enum
  isExternal: true
  name: FileOption
  nameWithType: FileOption
  fullName: DotNetHelper_IO.Enum.FileOption
- uid: DotNetHelper_IO.Enum
  commentId: N:DotNetHelper_IO.Enum
  isExternal: true
  name: DotNetHelper_IO.Enum
  nameWithType: DotNetHelper_IO.Enum
  fullName: DotNetHelper_IO.Enum
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass
  name: ScriptTableToCSharpClass
  nameWithType: IDataSourceDb.ScriptTableToCSharpClass
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptTableToCSharpClass
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass
  name: ScriptQueryToCSharpClass
  nameWithType: IDataSourceDb.ScriptQueryToCSharpClass
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptQueryToCSharpClass
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql
  name: ScriptCSharpClassToTsql
  nameWithType: IDataSourceDb.ScriptCSharpClassToTsql
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.ScriptCSharpClassToTsql
- uid: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType*
  commentId: Overload:DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType
  name: DBTypeToDotNetType
  nameWithType: IDataSourceDb.DBTypeToDotNetType
  fullName: DotNetHelper_Serializer.Interface.IDataSourceDb.DBTypeToDotNetType
